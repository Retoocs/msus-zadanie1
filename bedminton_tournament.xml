<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://netgrif.github.io/petriflow/petriflow.schema.xsd">
	<id>bedminton_tournament</id>
	<initials>BT</initials>
	<title>Bedminton tournament</title>
	<defaultRole>false</defaultRole>
	<transitionRole>false</transitionRole>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<role>
		<id>system</id>
		<title>System</title>
	</role>
	<role>
		<id>organizator</id>
		<title>Organizator</title>
	</role>
	<role>
		<id>player</id>
		<title>Player</title>
	</role>
	<!-- PROCESS ROLE REFS -->
	<roleRef>
		<id>organizator</id>
		<caseLogic>
			<create>true</create>
			<delete>true</delete>
			<view>true</view>
		</caseLogic>
	</roleRef>
	<roleRef>
		<id>player</id>
		<caseLogic>
			<view>true</view>
		</caseLogic>
	</roleRef>
	<roleRef>
		<id>system</id>
		<caseLogic>
			<create>true</create>
			<delete>true</delete>
			<view>true</view>
		</caseLogic>
	</roleRef>
	<!-- PROCESS USER REFS -->
	<!-- DATA -->
	<data type="number">
		<id>request_denied</id>
		<title>To [join finished] - denied</title>
		<init>0</init>
	</data>
	<data type="number">
		<id>request_accepted</id>
		<title>To [register requester]</title>
		<init>0</init>
	</data>
	<data type="number">
		<id>unable_generate</id>
		<title>To [preparation_phase] - unable generate</title>
		<init>0</init>
	</data>
	<data type="number">
		<id>able_generate</id>
		<title>To [able to generate]</title>
		<init>0</init>
	</data>
	<data type="number">
		<id>generated_count</id>
		<title>To [matches generated]</title>
		<init>0</init>
	</data>
	<data type="number">
		<id>finished_matches_count</id>
		<title>From [finished matches]</title>
		<init>999999</init>
	</data>
	<data type="text">
		<id>tournament_name</id>
		<title>Tournament name</title>
		<init>A tournament</init>
	</data>
	<data type="enumeration">
		<id>tournament_capacity</id>
		<title>Total number of players</title>
		<values>2</values>
		<values>8</values>
		<values>16</values>
		<init>8</init>
	</data>
	<data type="enumeration">
		<id>tournament_type</id>
		<title>Tournament type</title>
		<values>singles</values>
		<init>singles</init>
	</data>
	<data type="text">
		<id>tournament_details</id>
		<title>Tournament details</title>
		<values>area</values>
		<init>Here write something about the tournament (Start date, duration, prize pool, ...)</init>
	</data>
	<data type="taskRef">
		<id>tournament_informations</id>
		<title></title>
		<init>t25</init>
	</data>
	<data type="text">
		<id>delete_confirmation</id>
		<title></title>
		<init>Confirm to delete the tournament</init>
	</data>
	<data type="number">
		<id>player_played_matches</id>
		<title>Played matches</title>
		<init>0</init>
		<action trigger="get">
			total: f.this;
			
			change total value { return loggedUser().email.size() }
		</action>
	</data>
	<data type="number">
		<id>player_won_matches</id>
		<title>Won matches</title>
		<init>0</init>
		<action trigger="get">
			won: f.this;
			
			change won value { return loggedUser().email.size() }
		</action>
	</data>
	<data type="number">
		<id>player_lost_matches</id>
		<title>Lost matches</title>
		<init>0</init>
		<action trigger="get">
			lost: f.this;
			
			change lost value { return loggedUser().email.size() }
		</action>
	</data>
	<data type="enumeration">
		<id>player_matches_view</id>
		<title>Your matches</title>
	</data>
	<data type="number">
		<id>player_score</id>
		<title>Your score (sets)</title>
	</data>
	<data type="enumeration_map">
		<id>all_matches</id>
		<title>all_matches</title>
	</data>
	<data type="number">
		<id>match_counter</id>
		<title>match_counter</title>
		<init>0</init>
	</data>
	<data type="enumeration">
		<id>registered_players</id>
		<title>Registrovany hraci</title>
		<values>G</values>
		<values>xchvostek@stuba.sk</values>
	</data>
	<data type="button">
		<id>delete_player</id>
		<title>Delete selected player</title>
	</data>
	<data type="text">
		<id>requester</id>
		<title>requester</title>
	</data>
	<data type="text">
		<id>close_id_request</id>
		<title>close_id_request</title>
	</data>
	<data type="number">
		<id>stats_all_matches</id>
		<title>Number of all matches</title>
	</data>
	<data type="number">
		<id>stats_played</id>
		<title>Number of played matches</title>
	</data>
	<data type="number">
		<id>stats_unplayed</id>
		<title>Number of unplayed matches</title>
	</data>
	<data type="text">
		<id>test</id>
		<title>test</title>
	</data>
	<!-- I18NS -->
	<!-- TRANSITIONS -->
	<transition>
		<id>t1</id>
		<x>260</x>
		<y>380</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Create tournament</label>
		<assignPolicy>auto</assignPolicy>

		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>organizator</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup</id>
			<dataRef>
				<id>tournament_informations</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>t2</id>
		<x>260</x>
		<y>140</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>View tournament informations</label>
		<roleRef>
			<id>player</id>
			<logic>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>organizator</id>
			<logic>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup</id>
			<dataRef>
				<id>tournament_informations</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>t4</id>
		<x>460</x>
		<y>140</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Delete tournament</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>organizator</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup</id>
			<dataRef>
				<id>delete_confirmation</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>t4_finish</id>
			<actions phase="post">
				<action>
					async.run{
						workflowService.deleteCase(useCase.stringId);
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t5</id>
		<x>660</x>
		<y>540</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Request join to tournament</label>
		<roleRef>
			<id>player</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="assign">
			<id>t5_assign</id>
			<actions phase="pre">
				<action>
					registered_players: f.registered_players;

					if(registered_players.choices.collect{ it.defaultValue }.contains(loggedUser().email)){
						throw new IllegalArgumentException("Uz ste zaregistrovany!")
					}
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>t5_finish</id>
			<actions phase="pre">
				<action>
					requester: f.requester;

					change requester value { loggedUser().email }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t6</id>
		<x>1140</x>
		<y>540</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Check availability [auto]</label>
		<trigger type="auto"/>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="assign">
			<id>t6_assign</id>
			<actions phase="post">
				<action>
					request_accepted: f.request_accepted,
					request_denied: f.request_denied,
					capacity: f.tournament_capacity,
					registered_players: f.registered_players,
					requester: f.requester;

					if(registered_players.choices.collect{ it.defaultValue }.size() &lt; Integer.valueOf(capacity.value.defaultValue)){
						change request_accepted value { return 1 }
					}
					else {
						change request_denied value { return 1 }
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t7</id>
		<x>660</x>
		<y>380</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Reinitialize request data [auto]</label>
		<trigger type="auto"/>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="finish">
			<id>t7_finish</id>
			<actions phase="pre">
				<action>
					request_accepted: f.request_accepted,
					request_denied: f.request_denied,
					requester: f.requester;

					change request_accepted value { return 0 }
					change request_denied value { return 0 }
					change requester value { return null }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t8</id>
		<x>1140</x>
		<y>380</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Register requester [auto]</label>
		<trigger type="auto"/>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="finish">
			<id>t8_finish</id>
			<actions phase="pre">
				<action>
					registered_players: f.registered_players,
					requester: f.requester;

					change registered_players choices { registered_players.choices + [requester.value] }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t9</id>
		<x>660</x>
		<y>260</y>
		<layout>
			<cols>3</cols>
			<offset>0</offset>
		</layout>
		<label>View my stats</label>
		<roleRef>
			<id>player</id>
			<logic>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup</id>
			<layout>grid</layout>
			<dataRef>
				<id>player_played_matches</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>player_won_matches</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>player_lost_matches</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>player_matches_view</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>3</rows>
					<cols>3</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>t10</id>
		<x>860</x>
		<y>860</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>generate matches [auto]</label>
		<trigger type="auto"/>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="finish">
			<id>t10_finish</id>
			<actions phase="pre">
				<action>
					finished_matches_count: f.finished_matches_count,
					generated_count: f.generated_count,
					match_counter: f.match_counter,
					tournament_capacity: f.tournament_capacity,
					registered_players: f.registered_players,
					all_matches: f.all_matches;

					def registeredPlayerMails = registered_players.choices.collect{ it.defaultValue }
					numberOfPlayers = registeredPlayerMails.size()

					// id : p1,p2,p1_score,p2_score,active,winner,looser

					def tmpList = []

					for(int picked = 0; picked &lt; numberOfPlayers - 1; picked++){
						for(int second = picked + 1; second &lt; numberOfPlayers; second++){
							def value = registeredPlayerMails.get(picked) + "," + registeredPlayerMails.get(second) + ",1,tbd,true,"
							def key = (int)match_counter.value
							change match_counter value { match_counter.value + 1}

							tmpList = tmpList + [key + ":" + value]
						}
					}

					change all_matches options {
						return tmpList.collectEntries{
							def entry = it.split(':')
							[(entry[0]): entry[1]]
						};
					}
					change generated_count value { match_counter.value }
					change finished_matches_count value { match_counter.value }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t12</id>
		<x>1140</x>
		<y>740</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Insert result of my match</label>
		<roleRef>
			<id>player</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup</id>
			<dataRef>
				<id>player_matches_view</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
					<action trigger="set">
						t12: t.t12,
						player_score: f.player_score;

						make player_score,required on t12 when {true}
						make player_score,editable on t12 when {true}
					</action>
				</logic>
			</dataRef>
			<dataRef>
				<id>player_score</id>
				<logic>
					<behavior>hidden</behavior>
					<behavior>required</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>t12_assign</id>
			<actions phase="pre">
				<action>
					t12: t.t12,
					player_score: f.player_score,
					player_matches_view: f.player_matches_view,
					all_matches: f.all_matches;

					make player_score,required on t12 when {true}
					make player_score,hidden on t12 when {true}

					def keys = all_matches.options.findAll{it.value.defaultValue.contains(loggedUser().email).and(it.value.defaultValue.contains("true"))}.collect{ it.key }
					def tmpPlayerMatches = all_matches.options.subMap(keys)
					def tmpList = tmpPlayerMatches.collect{ it.key + ":  " + (it.value.defaultValue.split(',')[0]) + " vs " + (it.value.defaultValue.split(',')[1]) }

					change player_matches_view choices { tmpList }
				</action>
			</actions>
		</event>
		<event type="cancel">
			<id>t12_cancel</id>
			<actions phase="pre">
				<action>
					player_matches_view: f.player_matches_view,
					player_score: f.player_score;

					change player_matches_view choices {[]}
					change player_matches_view value { null }
					change player_score value { null }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t26</id>
		<x>1380</x>
		<y>620</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Process the input [auto]</label>
		<trigger type="auto"/>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="finish">
			<id>t26_finish</id>
			<actions phase="pre">
				<action>
					all_matches: f.all_matches,
					player_matches_view: f.player_matches_view,
					player_score: f.player_score;

					def selectedKey = player_matches_view.value?.defaultValue.split(':')[0]
					def toEditMap = all_matches.options.collectEntries{key, value -> [key, value.defaultValue]}

					def valueArray = toEditMap[selectedKey].split(',')

					if(valueArray[0] == loggedUser().email){
						valueArray[2] = (int)player_score.value
					}
					else if(valueArray[1] == loggedUser().email){
						valueArray[3] = (int)player_score.value
					}

					def editedValue = valueArray.join(',')

					toEditMap[selectedKey] = editedValue

					change all_matches options { toEditMap }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t27</id>
		<x>980</x>
		<y>620</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Reinitialize input data [auto]</label>
		<trigger type="auto"/>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup</id>
			<dataRef>
				<id>test</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>t27_finish</id>
			<actions phase="post">
				<action>
					close_id_request: f.close_id_request,
					all_matches: f.all_matches,
					player_matches_view: f.player_matches_view,
					player_score: f.player_score;

					def selectedKey = player_matches_view.value?.defaultValue.split(':')[0]

					def p1_score = all_matches.options[selectedKey].defaultValue.split(',')[2]
					def p2_score = all_matches.options[selectedKey].defaultValue.split(',')[3]

					if( (p1_score != "tbd").and(p2_score != "tbd") ){
						change close_id_request value { selectedKey }
						async.run{
							assignTask("t23")
							finishTask("t23")
						}
					}

					change player_matches_view choices {[]}
					change player_matches_view value { null }
					change player_score value { null }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t14</id>
		<x>1140</x>
		<y>1020</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Synch up all matches [barrier] [auto]</label>
		<trigger type="auto"/>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
	</transition>
	<transition>
		<id>t15</id>
		<x>660</x>
		<y>1020</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Finish tournament [auto]</label>
		<trigger type="auto"/>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
	</transition>
	<transition>
		<id>t16</id>
		<x>260</x>
		<y>260</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Edit tournament informations</label>
		<roleRef>
			<id>organizator</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup</id>
			<dataRef>
				<id>tournament_informations</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>t17</id>
		<x>260</x>
		<y>860</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Edit a specific match</label>
		<roleRef>
			<id>organizator</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
	</transition>
	<transition>
		<id>t18</id>
		<x>260</x>
		<y>1020</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Validate tournament finish</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>organizator</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
	</transition>
	<transition>
		<id>t19</id>
		<x>460</x>
		<y>700</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Check ability to generate [time]</label>
		<trigger type="time">
			<delay>PT60M</delay>
		</trigger>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>organizator</id>
			<logic>
				<view>true</view>
			</logic>
		</roleRef>
		<event type="assign">
			<id>t19_assign</id>
			<actions phase="post">
				<action>
					tournament_capacity: f.tournament_capacity,
					registered_players: f.registered_players,
					unable_generate: f.unable_generate,
					able_generate: f.able_generate;

					def registered_count = registered_players.choices.collect{ it.defaultValue }.size()
					def capacity = Integer.valueOf(tournament_capacity.value.defaultValue)

					if(registered_count == capacity){
						change able_generate value { return 1; }
					}
					else {
						change unable_generate value { return 1; }
					}
				</action>
			</actions>
		</event>
		<event type="finish">
			<id>t19_finish</id>
			<actions phase="post">
				<action>
					unable_generate: f.unable_generate,
					able_generate: f.able_generate;

					change able_generate value { return 0; }
					change unable_generate value { return 0; }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t20</id>
		<x>260</x>
		<y>540</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Unregister myself</label>
		<roleRef>
			<id>player</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="finish">
			<id>t20_finish</id>
			<actions phase="pre">
				<action>
					requester: f.requester;

					change requester value { loggedUser().email }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t21</id>
		<x>260</x>
		<y>700</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Unregistrate [auto]</label>
		<trigger type="auto"/>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="finish">
			<id>t21_finish</id>
			<actions phase="pre">
				<action>
					registered_players: f.registered_players,
					requester: f.requester;

					def playersSet = registered_players.choices.collect{ it.defaultValue }
					playersSet.remove(requester.value)

					change registered_players choices { playersSet }
				</action>
			</actions>
			<actions phase="post">
				<action>
					requester: f.requester;

					change requester value { null }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t22</id>
		<x>660</x>
		<y>140</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>View tournament stats</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>player</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>organizator</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup</id>
			<dataRef>
				<id>stats_all_matches</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>stats_played</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>stats_unplayed</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>t22_assign</id>
			<actions phase="pre">
				<action>
					all_matches: f.all_matches,
					all: f.stats_all_matches,
					played: f.stats_played,
					unplayed: f.stats_unplayed;

					def tmpAll = 0
					def tmpPlayed = 0
					def tmpUnplayed = 0

					if(all_matches.options != null){
						def allMatches = all_matches.options.collectEntries{key, value -> [key, value.defaultValue]}
						tmpAll = allMatches.size()

						for(entry in allMatches){
							if(entry.value.split(',')[4] == "true")
								tmpUnplayed++
							if(entry.value.split(',')[4] == "false")
								tmpPlayed++
						}
					}

					change all value { return tmpAll; }
					change played value { return tmpPlayed; }
					change unplayed value { return tmpUnplayed; }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t23</id>
		<x>1380</x>
		<y>860</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Close match [await synch]</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<event type="finish">
			<id>t23_finish</id>
			<actions phase="pre">
				<action>
					close_id_request: f.close_id_request,
					all_matches: f.all_matches;

					def toEditMap = all_matches.options.collectEntries{key, value -> [key, value.defaultValue]}

					def valueArray = toEditMap[close_id_request.value].split(',')

					valueArray[4] = "false"
					if(Integer.valueOf(valueArray[2]) > Integer.valueOf(valueArray[3])){
						valueArray = valueArray + [valueArray[0], valueArray[1]]
					}
					else{
						valueArray = valueArray + [valueArray[1], valueArray[0]]
					}

					def editedValue = valueArray.join(',')

					toEditMap[close_id_request.value] = editedValue

					change all_matches options { toEditMap }
				</action>
			</actions>
			<actions phase="post">
				<action>
					close_id_request: f.close_id_request;

					change close_id_request value { null }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t24</id>
		<x>860</x>
		<y>300</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Manage players</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<roleRef>
			<id>organizator</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup</id>
			<dataRef>
				<id>registered_players</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>delete_player</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="set">
						registered_players: f.registered_players;

						change registered_players choices {
							return registered_players.choices - registered_players.value.defaultValue;
						}

						change registered_players value { null }
					</action>
				</logic>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>t25</id>
		<x>660</x>
		<y>20</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Tournament informations</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup</id>
			<dataRef>
				<id>tournament_name</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>tournament_capacity</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>tournament_details</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>tournament_type</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>registered_players</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>all_matches</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
			</dataRef>
		</dataGroup>
	</transition>
	<!-- PLACES -->
	<place>
		<id>p1</id>
		<x>100</x>
		<y>380</y>
		<label>uninitialized</label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p2</id>
		<x>460</x>
		<y>260</y>
		<label>created</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p3</id>
		<x>460</x>
		<y>380</y>
		<label>preparation phase</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p5</id>
		<x>460</x>
		<y>20</y>
		<label>deleted</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p7</id>
		<x>860</x>
		<y>380</y>
		<label>joining finished</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p8</id>
		<x>1380</x>
		<y>380</y>
		<label>join avalaible</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p9</id>
		<x>860</x>
		<y>540</y>
		<label>requested</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p11</id>
		<x>1140</x>
		<y>860</y>
		<label>matches generated</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p12</id>
		<x>860</x>
		<y>1020</y>
		<label>every match has been played</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p14</id>
		<x>460</x>
		<y>1020</y>
		<label>requested to finish</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p16</id>
		<x>460</x>
		<y>860</y>
		<label>ongoin tournament</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p17</id>
		<x>100</x>
		<y>1020</y>
		<label>tournament finished</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p18</id>
		<x>860</x>
		<y>700</y>
		<label>able to generate matches</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p19</id>
		<x>100</x>
		<y>540</y>
		<label>requested unregistration</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p20</id>
		<x>1380</x>
		<y>1020</y>
		<label>finished matches</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p21</id>
		<x>1380</x>
		<y>740</y>
		<label>inserted</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p23</id>
		<x>1140</x>
		<y>620</y>
		<label>processed</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>a1</id>
		<type>regular</type>
		<sourceId>p1</sourceId>
		<destinationId>t1</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a2</id>
		<type>regular</type>
		<sourceId>t1</sourceId>
		<destinationId>p2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a3</id>
		<type>regular</type>
		<sourceId>t1</sourceId>
		<destinationId>p3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a4</id>
		<type>read</type>
		<sourceId>p2</sourceId>
		<destinationId>t2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a7</id>
		<type>regular</type>
		<sourceId>p2</sourceId>
		<destinationId>t4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a10</id>
		<type>regular</type>
		<sourceId>t4</sourceId>
		<destinationId>p5</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a11</id>
		<type>regular</type>
		<sourceId>p3</sourceId>
		<destinationId>t5</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a12</id>
		<type>regular</type>
		<sourceId>p7</sourceId>
		<destinationId>t7</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a13</id>
		<type>regular</type>
		<sourceId>t7</sourceId>
		<destinationId>p3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a14</id>
		<type>regular</type>
		<sourceId>t6</sourceId>
		<destinationId>p7</destinationId>
		<multiplicity>0</multiplicity>
		<reference>request_denied</reference>
	</arc>
	<arc>
		<id>a15</id>
		<type>regular</type>
		<sourceId>t6</sourceId>
		<destinationId>p8</destinationId>
		<multiplicity>0</multiplicity>
		<reference>request_accepted</reference>
	</arc>
	<arc>
		<id>a16</id>
		<type>regular</type>
		<sourceId>p8</sourceId>
		<destinationId>t8</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a17</id>
		<type>regular</type>
		<sourceId>t8</sourceId>
		<destinationId>p7</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a18</id>
		<type>regular</type>
		<sourceId>t5</sourceId>
		<destinationId>p9</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a19</id>
		<type>regular</type>
		<sourceId>p9</sourceId>
		<destinationId>t6</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a20</id>
		<type>read</type>
		<sourceId>p2</sourceId>
		<destinationId>t9</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a23</id>
		<type>regular</type>
		<sourceId>t10</sourceId>
		<destinationId>p11</destinationId>
		<multiplicity>0</multiplicity>
		<reference>generated_count</reference>
	</arc>
	<arc>
		<id>a27</id>
		<type>regular</type>
		<sourceId>t14</sourceId>
		<destinationId>p12</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a28</id>
		<type>regular</type>
		<sourceId>p12</sourceId>
		<destinationId>t15</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a31</id>
		<type>regular</type>
		<sourceId>t10</sourceId>
		<destinationId>p16</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a32</id>
		<type>regular</type>
		<sourceId>t15</sourceId>
		<destinationId>p14</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a33</id>
		<type>read</type>
		<sourceId>p16</sourceId>
		<destinationId>t17</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a34</id>
		<type>regular</type>
		<sourceId>p14</sourceId>
		<destinationId>t18</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a35</id>
		<type>regular</type>
		<sourceId>p16</sourceId>
		<destinationId>t18</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a36</id>
		<type>regular</type>
		<sourceId>t18</sourceId>
		<destinationId>p17</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a37</id>
		<type>regular</type>
		<sourceId>p3</sourceId>
		<destinationId>t19</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>420</x><y>540</y></breakPoint>
	</arc>
	<arc>
		<id>a38</id>
		<type>regular</type>
		<sourceId>t19</sourceId>
		<destinationId>p18</destinationId>
		<multiplicity>0</multiplicity>
		<reference>able_generate</reference>
	</arc>
	<arc>
		<id>a39</id>
		<type>regular</type>
		<sourceId>p18</sourceId>
		<destinationId>t10</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a40</id>
		<type>regular</type>
		<sourceId>t19</sourceId>
		<destinationId>p3</destinationId>
		<multiplicity>0</multiplicity>
		<reference>unable_generate</reference>
		<breakPoint><x>500</x><y>540</y></breakPoint>
	</arc>
	<arc>
		<id>a41</id>
		<type>regular</type>
		<sourceId>p3</sourceId>
		<destinationId>t20</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a42</id>
		<type>regular</type>
		<sourceId>t20</sourceId>
		<destinationId>p19</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a43</id>
		<type>regular</type>
		<sourceId>p19</sourceId>
		<destinationId>t21</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a44</id>
		<type>regular</type>
		<sourceId>t21</sourceId>
		<destinationId>p3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a45</id>
		<type>regular</type>
		<sourceId>p2</sourceId>
		<destinationId>t16</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a46</id>
		<type>regular</type>
		<sourceId>t16</sourceId>
		<destinationId>p2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a47</id>
		<type>read</type>
		<sourceId>p2</sourceId>
		<destinationId>t22</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a48</id>
		<type>regular</type>
		<sourceId>p11</sourceId>
		<destinationId>t23</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a49</id>
		<type>regular</type>
		<sourceId>t23</sourceId>
		<destinationId>p20</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a50</id>
		<type>regular</type>
		<sourceId>p20</sourceId>
		<destinationId>t14</destinationId>
		<multiplicity>999999</multiplicity>
		<reference>finished_matches_count</reference>
	</arc>
	<arc>
		<id>a51</id>
		<type>regular</type>
		<sourceId>p3</sourceId>
		<destinationId>t24</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a52</id>
		<type>regular</type>
		<sourceId>t24</sourceId>
		<destinationId>p3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a53</id>
		<type>regular</type>
		<sourceId>p11</sourceId>
		<destinationId>t12</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a54</id>
		<type>regular</type>
		<sourceId>t12</sourceId>
		<destinationId>p21</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a55</id>
		<type>regular</type>
		<sourceId>p21</sourceId>
		<destinationId>t26</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a56</id>
		<type>regular</type>
		<sourceId>t26</sourceId>
		<destinationId>p23</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a57</id>
		<type>regular</type>
		<sourceId>p23</sourceId>
		<destinationId>t27</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a58</id>
		<type>regular</type>
		<sourceId>t27</sourceId>
		<destinationId>p11</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a59</id>
		<type>inhibitor</type>
		<sourceId>p21</sourceId>
		<destinationId>t12</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a60</id>
		<type>inhibitor</type>
		<sourceId>p23</sourceId>
		<destinationId>t12</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a61</id>
		<type>read</type>
		<sourceId>p3</sourceId>
		<destinationId>t16</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>
